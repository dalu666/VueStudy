{"remainingRequest":"E:\\test\\VueStudy\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\test\\VueStudy\\src\\views\\Test\\Draggable.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\test\\VueStudy\\src\\views\\Test\\Draggable.vue","mtime":1602316375933},{"path":"E:\\test\\VueStudy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\test\\VueStudy\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\test\\VueStudy\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\test\\VueStudy\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\test\\VueStudy\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport modeDiv from '../../components/modeDiv.vue'\r\nexport default {\r\n\tname:'draggable',\r\n\tdata(){\r\n\t\treturn{\r\n            nodeNum:0,\r\n            selectionStyleMap:[],\r\n            isDown:false,//鼠标是否按下,\r\n            nodeId:'',\r\n            widthVal:100\r\n\t\t}\r\n\t},\r\n\tcomponents:{modeDiv},\r\n\tmethods:{\r\n        \r\n        handleComponentTrigger(){\r\n            console.log('点击')\r\n        },\r\n        handleDragStartDome(node, event){\r\n            let start={\r\n                left:event.offsetX,\r\n                top:event.offsetY\r\n            }\r\n            node.start={...start};\r\n            event.dataTransfer.setData('node', JSON.stringify(node));\r\n            console.log(event)\r\n        },\r\n        handleDropOnNode(node,event){\r\n            console.log('拖动结束')\r\n            let offsetX = event.offsetX\r\n            let offsetY = event.offsetY\r\n            let style = {\r\n                position: 'absolute',\r\n                'pointer-events': 'auto',\r\n                left: offsetX + 'px',\r\n                top: offsetY + 'px',\r\n                \r\n            }\r\n            event.style=style;\r\n        },\r\n        handleDragStart: function (event,type) {\r\n            let _t = this\r\n            this.nodeNum++\r\n            // 拖拽的节点数据\r\n            let nodeInfo = {\r\n                id: 'node-' +this.nodeNum,\r\n                innerHTML: '',\r\n                type:type,\r\n                start:{\r\n                    left:event.offsetX,\r\n                    top:event.offsetY\r\n                }\r\n            }\r\n            event.dataTransfer.setData('node', JSON.stringify(nodeInfo))\r\n            console.log(event)\r\n        },\r\n        handleDropOnCanvas(event){ //拖拽结束\r\n            let that=this;\r\n            // console.log(event.offsetX)\r\n            let nodeInfo=JSON.parse(event.dataTransfer.getData('node'));\r\n            \r\n            this.nodeId=nodeInfo.id;\r\n            let offsetX = event.offsetX - nodeInfo.start.left;\r\n            let offsetY = event.offsetY-nodeInfo.start.top;\r\n            let style = {\r\n                position: 'absolute',\r\n                'pointer-events': 'auto',\r\n                left: offsetX + 'px',\r\n                top: offsetY + 'px',\r\n                width:'100px',\r\n                height:'30px'\r\n            }\r\n            \r\n            nodeInfo.style={...style}\r\n            if (this.selectionStyleMap.length) {\r\n                // 判断该节点是否已存在\r\n                let nodeIndex = this.selectionStyleMap.findIndex(node => node.id === nodeInfo.id)\r\n                if(nodeIndex>-1){\r\n                    nodeInfo.style.width=that.selectionStyleMap[nodeIndex].style.width;\r\n                    this.selectionStyleMap.splice(nodeIndex,1,nodeInfo) ;\r\n                }else{\r\n                    this.selectionStyleMap.push(nodeInfo) \r\n                }\r\n            }else{\r\n                this.selectionStyleMap.push(nodeInfo) \r\n            }\r\n        },\r\n        getWidth(){\r\n            let nodeIndex = this.selectionStyleMap.findIndex(node => node.id === this.nodeId)\r\n            let widthVal=this.selectionStyleMap[nodeIndex].style.width;\r\n            this.widthVal=widthVal.replace(/px/, \"\")\r\n        },\r\n        changeWidth(event){\r\n            let nodeIndex = this.selectionStyleMap.findIndex(node => node.id === this.nodeId)\r\n            let widthVal=this.selectionStyleMap[nodeIndex].style.width;\r\n            // console.log(widthVal.replace(/px/, \"\"))\r\n            let newNode=this.selectionStyleMap[nodeIndex];\r\n            newNode.style.width=event.target.value + 'px'\r\n            this.selectionStyleMap.splice(nodeIndex,1,newNode);\r\n        }\r\n    },\r\n}\r\n",{"version":3,"sources":["Draggable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Draggable.vue","sourceRoot":"src/views/Test","sourcesContent":["<template>\r\n    <div class=\"dragg\">\r\n\t\t<div class=\"draggLeft\">\r\n\t\t\t<ul class=\"moduleList\">\r\n\t\t\t\t<li class=\"modeText\"  draggable=\"true\" @dragstart=\"handleDragStart($event,'span')\"   >文本</li>\r\n\t\t\t\t<li draggable=\"true\" @dragstart=\"handleDragStart($event,'input')\">输入框</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\t\t<div class=\"draggRight\" id=\"draggRight\"  @drop.stop.prevent=\"handleDropOnCanvas($event)\"\r\n            @dragover.stop.prevent\r\n            >\r\n                <div v-for=\"(item,index) in selectionStyleMap\" :key=\"index\"\r\n                    draggable=\"true\"\r\n                    :style=\"item.style\"\r\n                    @click.native.stop.prevent=\"handleComponentTrigger(childNode)\"\r\n                    @dragstart=\"handleDragStartDome(item,$event)\"\r\n\r\n                    @drop.native.stop.prevent=\"handleDropOnNode(item, $event)\"\r\n                    @dragover.stop.prevent\r\n                >\r\n                    \r\n                    <input v-if=\"item.type=='input'\" placeholder=\"请输入\" type=\"text\">\r\n                    <span v-if=\"item.type=='span'\" contenteditable=\"true\" style=\"outline:none;\">文本</span>\r\n                </div>\r\n\t\t</div>\r\n        <div class=\"styleBox\">\r\n            <ul>\r\n                <li>宽：<input type=\"number\" @input=\"changeWidth($event)\" v-model=\"widthVal\" @focus=\"getWidth\" ></li>\r\n                <li>高：<input type=\"number\" ></li>\r\n            </ul>\r\n        </div>\r\n\t</div>\r\n</template>\r\n<script>\r\nimport modeDiv from '../../components/modeDiv.vue'\r\nexport default {\r\n\tname:'draggable',\r\n\tdata(){\r\n\t\treturn{\r\n            nodeNum:0,\r\n            selectionStyleMap:[],\r\n            isDown:false,//鼠标是否按下,\r\n            nodeId:'',\r\n            widthVal:100\r\n\t\t}\r\n\t},\r\n\tcomponents:{modeDiv},\r\n\tmethods:{\r\n        \r\n        handleComponentTrigger(){\r\n            console.log('点击')\r\n        },\r\n        handleDragStartDome(node, event){\r\n            let start={\r\n                left:event.offsetX,\r\n                top:event.offsetY\r\n            }\r\n            node.start={...start};\r\n            event.dataTransfer.setData('node', JSON.stringify(node));\r\n            console.log(event)\r\n        },\r\n        handleDropOnNode(node,event){\r\n            console.log('拖动结束')\r\n            let offsetX = event.offsetX\r\n            let offsetY = event.offsetY\r\n            let style = {\r\n                position: 'absolute',\r\n                'pointer-events': 'auto',\r\n                left: offsetX + 'px',\r\n                top: offsetY + 'px',\r\n                \r\n            }\r\n            event.style=style;\r\n        },\r\n        handleDragStart: function (event,type) {\r\n            let _t = this\r\n            this.nodeNum++\r\n            // 拖拽的节点数据\r\n            let nodeInfo = {\r\n                id: 'node-' +this.nodeNum,\r\n                innerHTML: '',\r\n                type:type,\r\n                start:{\r\n                    left:event.offsetX,\r\n                    top:event.offsetY\r\n                }\r\n            }\r\n            event.dataTransfer.setData('node', JSON.stringify(nodeInfo))\r\n            console.log(event)\r\n        },\r\n        handleDropOnCanvas(event){ //拖拽结束\r\n            let that=this;\r\n            // console.log(event.offsetX)\r\n            let nodeInfo=JSON.parse(event.dataTransfer.getData('node'));\r\n            \r\n            this.nodeId=nodeInfo.id;\r\n            let offsetX = event.offsetX - nodeInfo.start.left;\r\n            let offsetY = event.offsetY-nodeInfo.start.top;\r\n            let style = {\r\n                position: 'absolute',\r\n                'pointer-events': 'auto',\r\n                left: offsetX + 'px',\r\n                top: offsetY + 'px',\r\n                width:'100px',\r\n                height:'30px'\r\n            }\r\n            \r\n            nodeInfo.style={...style}\r\n            if (this.selectionStyleMap.length) {\r\n                // 判断该节点是否已存在\r\n                let nodeIndex = this.selectionStyleMap.findIndex(node => node.id === nodeInfo.id)\r\n                if(nodeIndex>-1){\r\n                    nodeInfo.style.width=that.selectionStyleMap[nodeIndex].style.width;\r\n                    this.selectionStyleMap.splice(nodeIndex,1,nodeInfo) ;\r\n                }else{\r\n                    this.selectionStyleMap.push(nodeInfo) \r\n                }\r\n            }else{\r\n                this.selectionStyleMap.push(nodeInfo) \r\n            }\r\n        },\r\n        getWidth(){\r\n            let nodeIndex = this.selectionStyleMap.findIndex(node => node.id === this.nodeId)\r\n            let widthVal=this.selectionStyleMap[nodeIndex].style.width;\r\n            this.widthVal=widthVal.replace(/px/, \"\")\r\n        },\r\n        changeWidth(event){\r\n            let nodeIndex = this.selectionStyleMap.findIndex(node => node.id === this.nodeId)\r\n            let widthVal=this.selectionStyleMap[nodeIndex].style.width;\r\n            // console.log(widthVal.replace(/px/, \"\"))\r\n            let newNode=this.selectionStyleMap[nodeIndex];\r\n            newNode.style.width=event.target.value + 'px'\r\n            this.selectionStyleMap.splice(nodeIndex,1,newNode);\r\n        }\r\n    },\r\n}\r\n</script>\r\n<style lang=\"stylus\" scoped>\r\n.dragg{\r\n\tdisplay:flex;\r\n\twidth:100%;\r\n\theight :100%;\r\n\tposition relative\r\n}\r\n.draggLeft{\r\n\twidth:20%;\r\n\theight :100%;\r\n\tborder-right :1px solid #ccc;\r\n\tbox-sizing:border-box;\r\n}\r\n.draggRight{\r\n\twidth:60%;\r\n\theight :100%;\r\n\tborder-right :1px solid #ccc;\r\n    position :relative;\r\n}\r\n.draggRight div{\r\n\tborder:1px solid #ccc;\r\n\t// width:100px;\r\n\t// height:30px;\r\n}\r\n.draggRight div input{\r\n\tborder:none;\r\n    height:28px;\r\n    width:100%;\r\n}\r\n.draggRight div span{\r\n    display:inline-block;\r\n    height:28px;\r\n    width:100%;\r\n    line-height:28px;\r\n}\r\n.moduleList{\r\n\tpadding-top:10px;\r\n}\r\n.moduleList li{\r\n\tdisplay:inline-block;\r\n\theight:30px;\r\n\tline-height :30px;\r\n\tborder:1px solid #ccc;\r\n\twidth :100px;\r\n\tcursor pointer;\r\n\tmargin :0 10px;\r\n\ttext-align:center;\r\n}\r\n.modeText{\r\n\tposition:relative;\r\n}\r\n.styleBox{\r\n    float:left;\r\n    width:20%;\r\n}\r\n.styleBox ul{\r\n    padding-top:10px;\r\n}\r\n.styleBox ul li{\r\n    margin-bottom:10px;\r\n}\r\n.styleBox ul li input{\r\n    border:1px solid #ccc;\r\n}\r\n</style>"]}]}